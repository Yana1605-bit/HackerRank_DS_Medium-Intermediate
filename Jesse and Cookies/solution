using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'cookies' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY A
     */

    public static int cookies(int k, List<int> A)
    {
        SortedSet<(int value, int index)> heap = new SortedSet<(int, int)>();
        for (int i = 0; i < A.Count; i++)
        heap.Add((A[i], i));

        int operations = 0;

        while (heap.Count > 0)
        {
            var first = heap.Min;
            if (first.value >= k) return operations; 
            heap.Remove(first);

            if (heap.Count == 0) return -1; 

            var second = heap.Min;
            heap.Remove(second);

            int newCookie = first.value + 2 * second.value;
            heap.Add((newCookie, first.index)); 

            operations++;
        }
        return -1;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int n = Convert.ToInt32(firstMultipleInput[0]);

        int k = Convert.ToInt32(firstMultipleInput[1]);

        List<int> A = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(ATemp => Convert.ToInt32(ATemp)).ToList();

        int result = Result.cookies(k, A);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
